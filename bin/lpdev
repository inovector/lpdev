#!/bin/bash

# Laravel Package Development CLI Tool
# Installation:
# 1. Save this file as 'lpdev' (or any name you prefer)
# 2. chmod +x lpdev
# 3. Move to PATH: sudo mv lpdev /usr/local/bin/
# 4. Run from anywhere: lpdev

# Configuration file location
CONFIG_DIR="$HOME/.lpdev"
CONFIG_FILE="$CONFIG_DIR/projects.json"
CURRENT_PROJECT_FILE="$CONFIG_DIR/current_project"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Initialize configuration
init_config() {
    if [ ! -d "$CONFIG_DIR" ]; then
        mkdir -p "$CONFIG_DIR"
        echo "[]" > "$CONFIG_FILE"
        touch "$CURRENT_PROJECT_FILE"
    fi
}

# Helper functions
print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${CYAN}ℹ${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_header() {
    echo -e "\n${BOLD}${BLUE}$1${NC}"
    echo -e "${BLUE}$(printf '%.0s=' {1..50})${NC}"
}

# JSON helpers (using jq if available, fallback to python)
json_tool_available() {
    if command -v jq &> /dev/null; then
        echo "jq"
    elif command -v python3 &> /dev/null; then
        echo "python"
    else
        echo "none"
    fi
}

# Project management functions
add_project() {
    print_header "Add New Project"
    
    echo -n "Project name: "
    read project_name
    
    echo -n "Laravel app path (absolute or relative): "
    read app_path
    app_path=$(realpath "$app_path" 2>/dev/null || echo "$app_path")
    
    echo -n "Package local development path: "
    read package_path
    package_path=$(realpath "$package_path" 2>/dev/null || echo "$package_path")
    
    echo -n "Package vendor name (e.g., inovector/mixpost-pro-team): "
    read package_vendor
    
    # Validate paths
    if [ ! -d "$app_path" ]; then
        print_error "Laravel app path does not exist!"
        return 1
    fi
    
    if [ ! -d "$package_path" ]; then
        print_error "Package path does not exist!"
        return 1
    fi
    
    # Add to config using Python (more reliable for JSON manipulation)
    python3 << EOF
import json
import os

config_file = "$CONFIG_FILE"
with open(config_file, 'r') as f:
    projects = json.load(f)

# Check if project already exists
if any(p['name'] == "$project_name" for p in projects):
    print("Project already exists!")
    exit(1)

projects.append({
    "name": "$project_name",
    "app_path": "$app_path",
    "package_path": "$package_path",
    "package_vendor": "$package_vendor",
    "package_vendor_path": "$app_path/vendor/${package_vendor}"
})

with open(config_file, 'w') as f:
    json.dump(projects, f, indent=2)
EOF
    
    if [ $? -eq 0 ]; then
        print_success "Project '$project_name' added successfully!"
        
        # Set as current if it's the first project
        if [ ! -s "$CURRENT_PROJECT_FILE" ]; then
            echo "$project_name" > "$CURRENT_PROJECT_FILE"
            print_info "Set as current project"
        fi
    else
        print_error "Failed to add project"
    fi
}

list_projects() {
    print_header "Available Projects"
    
    current=$(cat "$CURRENT_PROJECT_FILE" 2>/dev/null)
    
    python3 << EOF
import json

with open("$CONFIG_FILE", 'r') as f:
    projects = json.load(f)

if not projects:
    print("No projects configured. Use 'lpdev add' to add a project.")
else:
    for i, p in enumerate(projects, 1):
        marker = "►" if p['name'] == "$current" else " "
        print(f"{marker} {i}. {p['name']}")
        print(f"     App: {p['app_path']}")
        print(f"     Package: {p['package_path']}")
        print(f"     Vendor: {p['package_vendor']}")
        print()
EOF
}

switch_project() {
    list_projects
    
    echo -n "Enter project name or number: "
    read selection
    
    project_name=$(python3 << EOF
import json

with open("$CONFIG_FILE", 'r') as f:
    projects = json.load(f)

selection = "$selection"

# Check if selection is a number
try:
    index = int(selection) - 1
    if 0 <= index < len(projects):
        print(projects[index]['name'])
    else:
        print("ERROR: Invalid number")
except ValueError:
    # Selection is a name
    for p in projects:
        if p['name'] == selection:
            print(p['name'])
            break
    else:
        print("ERROR: Project not found")
EOF
)
    
    if [[ $project_name == ERROR:* ]]; then
        print_error "${project_name#ERROR: }"
    else
        echo "$project_name" > "$CURRENT_PROJECT_FILE"
        print_success "Switched to project: $project_name"
    fi
}

get_current_project() {
    if [ ! -s "$CURRENT_PROJECT_FILE" ]; then
        print_error "No project selected. Use 'lpdev switch' to select a project."
        return 1
    fi
    
    current=$(cat "$CURRENT_PROJECT_FILE")
    
    python3 << EOF
import json
import sys

with open("$CONFIG_FILE", 'r') as f:
    projects = json.load(f)

for p in projects:
    if p['name'] == "$current":
        print(f"export LPDEV_PROJECT='{p['name']}'")
        print(f"export LPDEV_APP_PATH='{p['app_path']}'")
        print(f"export LPDEV_PACKAGE_PATH='{p['package_path']}'")
        print(f"export LPDEV_PACKAGE_VENDOR='{p['package_vendor']}'")
        print(f"export LPDEV_PACKAGE_VENDOR_PATH='{p['package_vendor_path']}'")
        sys.exit(0)

sys.exit(1)
EOF
}

remove_project() {
    list_projects
    
    echo -n "Enter project name to remove: "
    read project_name
    
    echo -n "Are you sure you want to remove '$project_name'? (y/N): "
    read confirm
    
    if [ "$confirm" != "y" ] && [ "$confirm" != "Y" ]; then
        print_info "Cancelled"
        return
    fi
    
    python3 << EOF
import json

with open("$CONFIG_FILE", 'r') as f:
    projects = json.load(f)

projects = [p for p in projects if p['name'] != "$project_name"]

with open("$CONFIG_FILE", 'w') as f:
    json.dump(projects, f, indent=2)
EOF
    
    print_success "Project removed"
    
    # Clear current if it was removed
    if [ "$(cat "$CURRENT_PROJECT_FILE" 2>/dev/null)" == "$project_name" ]; then
        > "$CURRENT_PROJECT_FILE"
    fi
}

# Development commands
link_package() {
    eval $(get_current_project) || return 1
    
    print_info "Linking package for project: $LPDEV_PROJECT"
    
    cd "$LPDEV_APP_PATH"
    rm -rf "$LPDEV_PACKAGE_VENDOR_PATH"
    ln -s "$LPDEV_PACKAGE_PATH" "$LPDEV_PACKAGE_VENDOR_PATH"
    
    print_success "Package linked successfully!"
}

unlink_package() {
    eval $(get_current_project) || return 1
    
    print_info "Unlinking package for project: $LPDEV_PROJECT"
    
    cd "$LPDEV_APP_PATH"
    rm -rf "$LPDEV_PACKAGE_VENDOR_PATH"
    composer install
    
    print_success "Package unlinked and restored from composer"
}

switch_branch() {
    eval $(get_current_project) || return 1
    
    echo -n "Enter branch name (e.g., dev-code_rules): "
    read branch
    
    cd "$LPDEV_APP_PATH"
    
    print_info "Switching to branch: $branch"
    
    # Update composer.json
    sed -i.bak "s|\"$LPDEV_PACKAGE_VENDOR\": \".*\"|\"$LPDEV_PACKAGE_VENDOR\": \"$branch\"|" composer.json
    rm composer.json.bak
    
    composer update "$LPDEV_PACKAGE_VENDOR"
    
    print_success "Switched to branch: $branch"
}

install_deps() {
    eval $(get_current_project) || return 1
    
    print_header "Installing Dependencies for $LPDEV_PROJECT"
    
    # Install app dependencies
    print_info "Installing app dependencies..."
    cd "$LPDEV_APP_PATH"
    composer install
    npm install
    
    # Install package dependencies
    print_info "Installing package dependencies..."
    cd "$LPDEV_PACKAGE_PATH"
    composer install
    npm install
    
    print_success "All dependencies installed!"
}

start_dev() {
    eval $(get_current_project) || return 1
    
    print_header "Starting Development Servers for $LPDEV_PROJECT"
    
    # Check if tmux is available
    if command -v tmux &> /dev/null; then
        session_name="lpdev-$LPDEV_PROJECT"
        
        # Kill existing session if it exists
        tmux kill-session -t "$session_name" 2>/dev/null
        
        # Create new session
        tmux new-session -d -s "$session_name" -n "servers"
        
        # Laravel server (pane 0)
        tmux send-keys -t "$session_name:servers.0" "cd $LPDEV_APP_PATH && php artisan serve" C-m
        
        # Laravel npm dev (pane 1)
        tmux split-window -h -t "$session_name:servers.0"
        tmux send-keys -t "$session_name:servers.1" "cd $LPDEV_APP_PATH && npm run dev" C-m
        
        # Package npm start (pane 2)
        tmux split-window -v -t "$session_name:servers.1"
        tmux send-keys -t "$session_name:servers.2" "cd $LPDEV_PACKAGE_PATH && npm run start" C-m
        
        print_success "Development servers started in tmux session: $session_name"
        print_info "Attach with: tmux attach-session -t $session_name"
        
        echo -n "Attach to session now? (Y/n): "
        read attach
        if [ "$attach" != "n" ] && [ "$attach" != "N" ]; then
            tmux attach-session -t "$session_name"
        fi
    else
        # Fallback to background processes
        print_warning "tmux not found. Starting servers in background..."
        
        cd "$LPDEV_APP_PATH" && php artisan serve &
        cd "$LPDEV_APP_PATH" && npm run dev &
        cd "$LPDEV_PACKAGE_PATH" && npm run start &
        
        print_success "Servers started in background"
        print_info "Use 'lpdev stop' to stop all servers"
    fi
}

stop_dev() {
    eval $(get_current_project) || return 1
    
    print_info "Stopping development servers..."
    
    # Kill tmux session if exists
    session_name="lpdev-$LPDEV_PROJECT"
    tmux kill-session -t "$session_name" 2>/dev/null
    
    # Kill background processes
    pkill -f "artisan serve" 2>/dev/null
    pkill -f "npm run dev" 2>/dev/null
    pkill -f "npm run start" 2>/dev/null
    
    print_success "Development servers stopped"
}

run_artisan() {
    eval $(get_current_project) || return 1
    
    cd "$LPDEV_APP_PATH"
    
    if [ $# -eq 0 ]; then
        echo -n "Enter artisan command: "
        read cmd
        php artisan $cmd
    else
        php artisan "$@"
    fi
}

clear_cache() {
    eval $(get_current_project) || return 1
    
    print_info "Clearing caches for $LPDEV_PROJECT..."
    
    cd "$LPDEV_APP_PATH"
    php artisan cache:clear
    php artisan config:clear
    php artisan route:clear
    php artisan view:clear
    php artisan optimize:clear
    composer dump-autoload
    
    print_success "All caches cleared!"
}

publish_assets() {
    eval $(get_current_project) || return 1
    
    cd "$LPDEV_APP_PATH"
    
    # Try to detect service provider
    provider=$(echo "$LPDEV_PACKAGE_VENDOR" | sed 's|/|\\\\|g' | sed 's|-|\\\\|g')
    provider="${provider}\\\\ServiceProvider"
    
    print_info "Publishing assets..."
    php artisan vendor:publish --force
    
    print_success "Assets published!"
}

env_set() {
    eval $(get_current_project) || return 1
    
    cd "$LPDEV_APP_PATH"
    
    if [ $# -lt 2 ]; then
        echo -n "Enter key: "
        read key
        echo -n "Enter value: "
        read value
    else
        key=$1
        value=$2
    fi
    
    if grep -q "^$key=" .env; then
        sed -i.bak "s|^$key=.*|$key=$value|" .env
        print_success "Updated: $key=$value"
    else
        echo "$key=$value" >> .env
        print_success "Added: $key=$value"
    fi
    rm -f .env.bak
}

run_tests() {
    eval $(get_current_project) || return 1
    
    print_header "Running Tests for $LPDEV_PROJECT"
    
    print_info "Running app tests..."
    cd "$LPDEV_APP_PATH"
    php artisan test
    
    print_info "Running package tests..."
    cd "$LPDEV_PACKAGE_PATH"
    if [ -f "vendor/bin/phpunit" ]; then
        ./vendor/bin/phpunit
    elif [ -f "vendor/bin/pest" ]; then
        ./vendor/bin/pest
    else
        print_warning "No test runner found in package"
    fi
}

build_package() {
    eval $(get_current_project) || return 1
    
    print_info "Building package assets..."
    cd "$LPDEV_PACKAGE_PATH"
    npm run build
    
    print_success "Package built!"
}

quick_restart() {
    stop_dev
    clear_cache
    start_dev
}

show_status() {
    print_header "LPDEV Status"
    
    current=$(cat "$CURRENT_PROJECT_FILE" 2>/dev/null)
    if [ -z "$current" ]; then
        print_warning "No project selected"
        echo ""
        list_projects
        return
    fi
    
    eval $(get_current_project) || return 1
    
    echo -e "${BOLD}Current Project:${NC} ${GREEN}$LPDEV_PROJECT${NC}"
    echo -e "${BOLD}App Path:${NC} $LPDEV_APP_PATH"
    echo -e "${BOLD}Package Path:${NC} $LPDEV_PACKAGE_PATH"
    echo -e "${BOLD}Package Vendor:${NC} $LPDEV_PACKAGE_VENDOR"
    
    # Check if package is linked
    if [ -L "$LPDEV_PACKAGE_VENDOR_PATH" ]; then
        echo -e "${BOLD}Package Status:${NC} ${GREEN}Linked (Development Mode)${NC}"
    else
        echo -e "${BOLD}Package Status:${NC} ${YELLOW}Composer Package${NC}"
    fi
    
    # Check running processes
    echo ""
    echo -e "${BOLD}Running Servers:${NC}"
    
    session_name="lpdev-$LPDEV_PROJECT"
    if tmux has-session -t "$session_name" 2>/dev/null; then
        echo -e "  ${GREEN}✓${NC} tmux session: $session_name"
    fi
    
    if pgrep -f "artisan serve" > /dev/null; then
        echo -e "  ${GREEN}✓${NC} Laravel server"
    else
        echo -e "  ${RED}✗${NC} Laravel server"
    fi
    
    if pgrep -f "npm run dev" > /dev/null; then
        echo -e "  ${GREEN}✓${NC} Laravel npm dev"
    else
        echo -e "  ${RED}✗${NC} Laravel npm dev"
    fi
    
    if pgrep -f "npm run start" > /dev/null; then
        echo -e "  ${GREEN}✓${NC} Package npm start"
    else
        echo -e "  ${RED}✗${NC} Package npm start"
    fi
}

exec_in_app() {
    eval $(get_current_project) || return 1
    cd "$LPDEV_APP_PATH"
    "$@"
}

exec_in_package() {
    eval $(get_current_project) || return 1
    cd "$LPDEV_PACKAGE_PATH"
    "$@"
}

show_help() {
    echo -e "${BOLD}${BLUE}Laravel Package Development CLI${NC}

${BOLD}USAGE:${NC}
    lpdev <command> [options]

${BOLD}PROJECT MANAGEMENT:${NC}
    ${GREEN}add${NC}              Add a new project
    ${GREEN}list${NC}             List all projects
    ${GREEN}switch${NC}           Switch between projects
    ${GREEN}remove${NC}           Remove a project
    ${GREEN}status${NC}           Show current project status

${BOLD}DEVELOPMENT:${NC}
    ${GREEN}link${NC}             Link local package for development
    ${GREEN}unlink${NC}           Restore package from composer
    ${GREEN}branch${NC} <name>    Switch package branch in composer.json
    ${GREEN}install${NC}          Install all dependencies (app + package)
    ${GREEN}start${NC}            Start all development servers
    ${GREEN}stop${NC}             Stop all development servers
    ${GREEN}restart${NC}          Quick restart (stop, clear cache, start)

${BOLD}LARAVEL COMMANDS:${NC}
    ${GREEN}artisan${NC} <cmd>    Run artisan command
    ${GREEN}clear${NC}            Clear all caches
    ${GREEN}fresh${NC}            Fresh migration with seeders
    ${GREEN}migrate${NC}          Run migrations
    ${GREEN}tinker${NC}           Start tinker session
    ${GREEN}test${NC}             Run tests

${BOLD}PACKAGE COMMANDS:${NC}
    ${GREEN}build${NC}            Build package assets
    ${GREEN}publish${NC}          Publish package assets

${BOLD}UTILITIES:${NC}
    ${GREEN}env${NC} <key> <val>  Set environment variable
    ${GREEN}app${NC} <cmd>        Execute command in app directory
    ${GREEN}pkg${NC} <cmd>        Execute command in package directory
    ${GREEN}logs${NC}             Tail Laravel logs

${BOLD}EXAMPLES:${NC}
    lpdev add                     # Add new project interactively
    lpdev switch myproject        # Switch to project
    lpdev start                   # Start development servers
    lpdev artisan migrate         # Run migrations
    lpdev app npm install axios   # Install npm package in app
    lpdev pkg npm run build       # Build package assets"
}

# Main script
init_config

# Handle commands
case "${1:-help}" in
    # Project management
    add) add_project ;;
    list|ls) list_projects ;;
    switch|sw) switch_project ;;
    remove|rm) remove_project ;;
    status|st) show_status ;;
    
    # Development
    link) link_package ;;
    unlink) unlink_package ;;
    branch|br) switch_branch ;;
    install|i) install_deps ;;
    start|up) start_dev ;;
    stop|down) stop_dev ;;
    restart) quick_restart ;;
    
    # Laravel commands
    artisan|a) shift; run_artisan "$@" ;;
    clear|cache) clear_cache ;;
    fresh) run_artisan "migrate:fresh" "--seed" ;;
    migrate|m) run_artisan "migrate" ;;
    tinker|t) run_artisan "tinker" ;;
    test) run_tests ;;
    
    # Package commands
    build) build_package ;;
    publish|pub) publish_assets ;;
    
    # Utilities
    env) shift; env_set "$@" ;;
    app) shift; exec_in_app "$@" ;;
    pkg) shift; exec_in_package "$@" ;;
    logs|log) 
        eval $(get_current_project) || exit 1
        tail -f "$LPDEV_APP_PATH/storage/logs/laravel.log" 
        ;;
    
    # Help
    help|h|--help|-h) show_help ;;
    
    *)
        print_error "Unknown command: $1"
        echo "Run 'lpdev help' for usage information"
        exit 1
        ;;
esac